// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-signer-notation-plugin/internal/client (interfaces: Interface)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	signer "github.com/aws/aws-sdk-go-v2/service/signer"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetRevocationStatus mocks base method.
func (m *MockInterface) GetRevocationStatus(arg0 context.Context, arg1 *signer.GetRevocationStatusInput, arg2 ...func(*signer.Options)) (*signer.GetRevocationStatusOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRevocationStatus", varargs...)
	ret0, _ := ret[0].(*signer.GetRevocationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevocationStatus indicates an expected call of GetRevocationStatus.
func (mr *MockInterfaceMockRecorder) GetRevocationStatus(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevocationStatus", reflect.TypeOf((*MockInterface)(nil).GetRevocationStatus), varargs...)
}

// SignPayload mocks base method.
func (m *MockInterface) SignPayload(arg0 context.Context, arg1 *signer.SignPayloadInput, arg2 ...func(*signer.Options)) (*signer.SignPayloadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignPayload", varargs...)
	ret0, _ := ret[0].(*signer.SignPayloadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignPayload indicates an expected call of SignPayload.
func (mr *MockInterfaceMockRecorder) SignPayload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignPayload", reflect.TypeOf((*MockInterface)(nil).SignPayload), varargs...)
}
